// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/isdeployed"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packageversion"
)

// IsDeployed is the model entity for the IsDeployed schema.
type IsDeployed struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// PackageID holds the value of the "package_id" field.
	PackageID uuid.UUID `json:"package_id,omitempty"`
	// DeployedSince holds the value of the "deployed_since" field.
	DeployedSince time.Time `json:"deployed_since,omitempty"`
	// DeployedUntil holds the value of the "deployed_until" field.
	DeployedUntil time.Time `json:"deployed_until,omitempty"`
	// ResourceID holds the value of the "resource_id" field.
	ResourceID string `json:"resource_id,omitempty"`
	// Environment holds the value of the "environment" field.
	Environment string `json:"environment,omitempty"`
	// Origin holds the value of the "origin" field.
	Origin string `json:"origin,omitempty"`
	// Collector holds the value of the "collector" field.
	Collector string `json:"collector,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the IsDeployedQuery when eager-loading is set.
	Edges        IsDeployedEdges `json:"edges"`
	selectValues sql.SelectValues
}

// IsDeployedEdges holds the relations/edges for other nodes in the graph.
type IsDeployedEdges struct {
	// Package holds the value of the package edge.
	Package *PackageVersion `json:"package,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// PackageOrErr returns the Package value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e IsDeployedEdges) PackageOrErr() (*PackageVersion, error) {
	if e.Package != nil {
		return e.Package, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: packageversion.Label}
	}
	return nil, &NotLoadedError{edge: "package"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*IsDeployed) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case isdeployed.FieldResourceID, isdeployed.FieldEnvironment, isdeployed.FieldOrigin, isdeployed.FieldCollector:
			values[i] = new(sql.NullString)
		case isdeployed.FieldDeployedSince, isdeployed.FieldDeployedUntil:
			values[i] = new(sql.NullTime)
		case isdeployed.FieldID, isdeployed.FieldPackageID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the IsDeployed fields.
func (id *IsDeployed) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case isdeployed.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				id.ID = *value
			}
		case isdeployed.FieldPackageID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field package_id", values[i])
			} else if value != nil {
				id.PackageID = *value
			}
		case isdeployed.FieldDeployedSince:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deployed_since", values[i])
			} else if value.Valid {
				id.DeployedSince = value.Time
			}
		case isdeployed.FieldDeployedUntil:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deployed_until", values[i])
			} else if value.Valid {
				id.DeployedUntil = value.Time
			}
		case isdeployed.FieldResourceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field resource_id", values[i])
			} else if value.Valid {
				id.ResourceID = value.String
			}
		case isdeployed.FieldEnvironment:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field environment", values[i])
			} else if value.Valid {
				id.Environment = value.String
			}
		case isdeployed.FieldOrigin:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field origin", values[i])
			} else if value.Valid {
				id.Origin = value.String
			}
		case isdeployed.FieldCollector:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field collector", values[i])
			} else if value.Valid {
				id.Collector = value.String
			}
		default:
			id.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the IsDeployed.
// This includes values selected through modifiers, order, etc.
func (id *IsDeployed) Value(name string) (ent.Value, error) {
	return id.selectValues.Get(name)
}

// QueryPackage queries the "package" edge of the IsDeployed entity.
func (id *IsDeployed) QueryPackage() *PackageVersionQuery {
	return NewIsDeployedClient(id.config).QueryPackage(id)
}

// Update returns a builder for updating this IsDeployed.
// Note that you need to call IsDeployed.Unwrap() before calling this method if this IsDeployed
// was returned from a transaction, and the transaction was committed or rolled back.
func (id *IsDeployed) Update() *IsDeployedUpdateOne {
	return NewIsDeployedClient(id.config).UpdateOne(id)
}

// Unwrap unwraps the IsDeployed entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (id *IsDeployed) Unwrap() *IsDeployed {
	_tx, ok := id.config.driver.(*txDriver)
	if !ok {
		panic("ent: IsDeployed is not a transactional entity")
	}
	id.config.driver = _tx.drv
	return id
}

// String implements the fmt.Stringer.
func (id *IsDeployed) String() string {
	var builder strings.Builder
	builder.WriteString("IsDeployed(")
	builder.WriteString(fmt.Sprintf("id=%v, ", id.ID))
	builder.WriteString("package_id=")
	builder.WriteString(fmt.Sprintf("%v", id.PackageID))
	builder.WriteString(", ")
	builder.WriteString("deployed_since=")
	builder.WriteString(id.DeployedSince.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deployed_until=")
	builder.WriteString(id.DeployedUntil.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("resource_id=")
	builder.WriteString(id.ResourceID)
	builder.WriteString(", ")
	builder.WriteString("environment=")
	builder.WriteString(id.Environment)
	builder.WriteString(", ")
	builder.WriteString("origin=")
	builder.WriteString(id.Origin)
	builder.WriteString(", ")
	builder.WriteString("collector=")
	builder.WriteString(id.Collector)
	builder.WriteByte(')')
	return builder.String()
}

// IsDeployeds is a parsable slice of IsDeployed.
type IsDeployeds []*IsDeployed

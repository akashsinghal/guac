// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/isdeployed"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packageversion"
)

// IsDeployedCreate is the builder for creating a IsDeployed entity.
type IsDeployedCreate struct {
	config
	mutation *IsDeployedMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetPackageID sets the "package_id" field.
func (idc *IsDeployedCreate) SetPackageID(u uuid.UUID) *IsDeployedCreate {
	idc.mutation.SetPackageID(u)
	return idc
}

// SetDeployedSince sets the "deployed_since" field.
func (idc *IsDeployedCreate) SetDeployedSince(t time.Time) *IsDeployedCreate {
	idc.mutation.SetDeployedSince(t)
	return idc
}

// SetDeployedUntil sets the "deployed_until" field.
func (idc *IsDeployedCreate) SetDeployedUntil(t time.Time) *IsDeployedCreate {
	idc.mutation.SetDeployedUntil(t)
	return idc
}

// SetResourceID sets the "resource_id" field.
func (idc *IsDeployedCreate) SetResourceID(s string) *IsDeployedCreate {
	idc.mutation.SetResourceID(s)
	return idc
}

// SetEnvironment sets the "environment" field.
func (idc *IsDeployedCreate) SetEnvironment(s string) *IsDeployedCreate {
	idc.mutation.SetEnvironment(s)
	return idc
}

// SetOrigin sets the "origin" field.
func (idc *IsDeployedCreate) SetOrigin(s string) *IsDeployedCreate {
	idc.mutation.SetOrigin(s)
	return idc
}

// SetCollector sets the "collector" field.
func (idc *IsDeployedCreate) SetCollector(s string) *IsDeployedCreate {
	idc.mutation.SetCollector(s)
	return idc
}

// SetID sets the "id" field.
func (idc *IsDeployedCreate) SetID(u uuid.UUID) *IsDeployedCreate {
	idc.mutation.SetID(u)
	return idc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (idc *IsDeployedCreate) SetNillableID(u *uuid.UUID) *IsDeployedCreate {
	if u != nil {
		idc.SetID(*u)
	}
	return idc
}

// SetPackage sets the "package" edge to the PackageVersion entity.
func (idc *IsDeployedCreate) SetPackage(p *PackageVersion) *IsDeployedCreate {
	return idc.SetPackageID(p.ID)
}

// Mutation returns the IsDeployedMutation object of the builder.
func (idc *IsDeployedCreate) Mutation() *IsDeployedMutation {
	return idc.mutation
}

// Save creates the IsDeployed in the database.
func (idc *IsDeployedCreate) Save(ctx context.Context) (*IsDeployed, error) {
	idc.defaults()
	return withHooks(ctx, idc.sqlSave, idc.mutation, idc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (idc *IsDeployedCreate) SaveX(ctx context.Context) *IsDeployed {
	v, err := idc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (idc *IsDeployedCreate) Exec(ctx context.Context) error {
	_, err := idc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (idc *IsDeployedCreate) ExecX(ctx context.Context) {
	if err := idc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (idc *IsDeployedCreate) defaults() {
	if _, ok := idc.mutation.ID(); !ok {
		v := isdeployed.DefaultID()
		idc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (idc *IsDeployedCreate) check() error {
	if _, ok := idc.mutation.PackageID(); !ok {
		return &ValidationError{Name: "package_id", err: errors.New(`ent: missing required field "IsDeployed.package_id"`)}
	}
	if _, ok := idc.mutation.DeployedSince(); !ok {
		return &ValidationError{Name: "deployed_since", err: errors.New(`ent: missing required field "IsDeployed.deployed_since"`)}
	}
	if _, ok := idc.mutation.DeployedUntil(); !ok {
		return &ValidationError{Name: "deployed_until", err: errors.New(`ent: missing required field "IsDeployed.deployed_until"`)}
	}
	if _, ok := idc.mutation.ResourceID(); !ok {
		return &ValidationError{Name: "resource_id", err: errors.New(`ent: missing required field "IsDeployed.resource_id"`)}
	}
	if _, ok := idc.mutation.Environment(); !ok {
		return &ValidationError{Name: "environment", err: errors.New(`ent: missing required field "IsDeployed.environment"`)}
	}
	if _, ok := idc.mutation.Origin(); !ok {
		return &ValidationError{Name: "origin", err: errors.New(`ent: missing required field "IsDeployed.origin"`)}
	}
	if _, ok := idc.mutation.Collector(); !ok {
		return &ValidationError{Name: "collector", err: errors.New(`ent: missing required field "IsDeployed.collector"`)}
	}
	if len(idc.mutation.PackageIDs()) == 0 {
		return &ValidationError{Name: "package", err: errors.New(`ent: missing required edge "IsDeployed.package"`)}
	}
	return nil
}

func (idc *IsDeployedCreate) sqlSave(ctx context.Context) (*IsDeployed, error) {
	if err := idc.check(); err != nil {
		return nil, err
	}
	_node, _spec := idc.createSpec()
	if err := sqlgraph.CreateNode(ctx, idc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	idc.mutation.id = &_node.ID
	idc.mutation.done = true
	return _node, nil
}

func (idc *IsDeployedCreate) createSpec() (*IsDeployed, *sqlgraph.CreateSpec) {
	var (
		_node = &IsDeployed{config: idc.config}
		_spec = sqlgraph.NewCreateSpec(isdeployed.Table, sqlgraph.NewFieldSpec(isdeployed.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = idc.conflict
	if id, ok := idc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := idc.mutation.DeployedSince(); ok {
		_spec.SetField(isdeployed.FieldDeployedSince, field.TypeTime, value)
		_node.DeployedSince = value
	}
	if value, ok := idc.mutation.DeployedUntil(); ok {
		_spec.SetField(isdeployed.FieldDeployedUntil, field.TypeTime, value)
		_node.DeployedUntil = value
	}
	if value, ok := idc.mutation.ResourceID(); ok {
		_spec.SetField(isdeployed.FieldResourceID, field.TypeString, value)
		_node.ResourceID = value
	}
	if value, ok := idc.mutation.Environment(); ok {
		_spec.SetField(isdeployed.FieldEnvironment, field.TypeString, value)
		_node.Environment = value
	}
	if value, ok := idc.mutation.Origin(); ok {
		_spec.SetField(isdeployed.FieldOrigin, field.TypeString, value)
		_node.Origin = value
	}
	if value, ok := idc.mutation.Collector(); ok {
		_spec.SetField(isdeployed.FieldCollector, field.TypeString, value)
		_node.Collector = value
	}
	if nodes := idc.mutation.PackageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   isdeployed.PackageTable,
			Columns: []string{isdeployed.PackageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packageversion.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PackageID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.IsDeployed.Create().
//		SetPackageID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.IsDeployedUpsert) {
//			SetPackageID(v+v).
//		}).
//		Exec(ctx)
func (idc *IsDeployedCreate) OnConflict(opts ...sql.ConflictOption) *IsDeployedUpsertOne {
	idc.conflict = opts
	return &IsDeployedUpsertOne{
		create: idc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.IsDeployed.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (idc *IsDeployedCreate) OnConflictColumns(columns ...string) *IsDeployedUpsertOne {
	idc.conflict = append(idc.conflict, sql.ConflictColumns(columns...))
	return &IsDeployedUpsertOne{
		create: idc,
	}
}

type (
	// IsDeployedUpsertOne is the builder for "upsert"-ing
	//  one IsDeployed node.
	IsDeployedUpsertOne struct {
		create *IsDeployedCreate
	}

	// IsDeployedUpsert is the "OnConflict" setter.
	IsDeployedUpsert struct {
		*sql.UpdateSet
	}
)

// SetPackageID sets the "package_id" field.
func (u *IsDeployedUpsert) SetPackageID(v uuid.UUID) *IsDeployedUpsert {
	u.Set(isdeployed.FieldPackageID, v)
	return u
}

// UpdatePackageID sets the "package_id" field to the value that was provided on create.
func (u *IsDeployedUpsert) UpdatePackageID() *IsDeployedUpsert {
	u.SetExcluded(isdeployed.FieldPackageID)
	return u
}

// SetDeployedSince sets the "deployed_since" field.
func (u *IsDeployedUpsert) SetDeployedSince(v time.Time) *IsDeployedUpsert {
	u.Set(isdeployed.FieldDeployedSince, v)
	return u
}

// UpdateDeployedSince sets the "deployed_since" field to the value that was provided on create.
func (u *IsDeployedUpsert) UpdateDeployedSince() *IsDeployedUpsert {
	u.SetExcluded(isdeployed.FieldDeployedSince)
	return u
}

// SetDeployedUntil sets the "deployed_until" field.
func (u *IsDeployedUpsert) SetDeployedUntil(v time.Time) *IsDeployedUpsert {
	u.Set(isdeployed.FieldDeployedUntil, v)
	return u
}

// UpdateDeployedUntil sets the "deployed_until" field to the value that was provided on create.
func (u *IsDeployedUpsert) UpdateDeployedUntil() *IsDeployedUpsert {
	u.SetExcluded(isdeployed.FieldDeployedUntil)
	return u
}

// SetResourceID sets the "resource_id" field.
func (u *IsDeployedUpsert) SetResourceID(v string) *IsDeployedUpsert {
	u.Set(isdeployed.FieldResourceID, v)
	return u
}

// UpdateResourceID sets the "resource_id" field to the value that was provided on create.
func (u *IsDeployedUpsert) UpdateResourceID() *IsDeployedUpsert {
	u.SetExcluded(isdeployed.FieldResourceID)
	return u
}

// SetEnvironment sets the "environment" field.
func (u *IsDeployedUpsert) SetEnvironment(v string) *IsDeployedUpsert {
	u.Set(isdeployed.FieldEnvironment, v)
	return u
}

// UpdateEnvironment sets the "environment" field to the value that was provided on create.
func (u *IsDeployedUpsert) UpdateEnvironment() *IsDeployedUpsert {
	u.SetExcluded(isdeployed.FieldEnvironment)
	return u
}

// SetOrigin sets the "origin" field.
func (u *IsDeployedUpsert) SetOrigin(v string) *IsDeployedUpsert {
	u.Set(isdeployed.FieldOrigin, v)
	return u
}

// UpdateOrigin sets the "origin" field to the value that was provided on create.
func (u *IsDeployedUpsert) UpdateOrigin() *IsDeployedUpsert {
	u.SetExcluded(isdeployed.FieldOrigin)
	return u
}

// SetCollector sets the "collector" field.
func (u *IsDeployedUpsert) SetCollector(v string) *IsDeployedUpsert {
	u.Set(isdeployed.FieldCollector, v)
	return u
}

// UpdateCollector sets the "collector" field to the value that was provided on create.
func (u *IsDeployedUpsert) UpdateCollector() *IsDeployedUpsert {
	u.SetExcluded(isdeployed.FieldCollector)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.IsDeployed.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(isdeployed.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *IsDeployedUpsertOne) UpdateNewValues() *IsDeployedUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(isdeployed.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.IsDeployed.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *IsDeployedUpsertOne) Ignore() *IsDeployedUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *IsDeployedUpsertOne) DoNothing() *IsDeployedUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the IsDeployedCreate.OnConflict
// documentation for more info.
func (u *IsDeployedUpsertOne) Update(set func(*IsDeployedUpsert)) *IsDeployedUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&IsDeployedUpsert{UpdateSet: update})
	}))
	return u
}

// SetPackageID sets the "package_id" field.
func (u *IsDeployedUpsertOne) SetPackageID(v uuid.UUID) *IsDeployedUpsertOne {
	return u.Update(func(s *IsDeployedUpsert) {
		s.SetPackageID(v)
	})
}

// UpdatePackageID sets the "package_id" field to the value that was provided on create.
func (u *IsDeployedUpsertOne) UpdatePackageID() *IsDeployedUpsertOne {
	return u.Update(func(s *IsDeployedUpsert) {
		s.UpdatePackageID()
	})
}

// SetDeployedSince sets the "deployed_since" field.
func (u *IsDeployedUpsertOne) SetDeployedSince(v time.Time) *IsDeployedUpsertOne {
	return u.Update(func(s *IsDeployedUpsert) {
		s.SetDeployedSince(v)
	})
}

// UpdateDeployedSince sets the "deployed_since" field to the value that was provided on create.
func (u *IsDeployedUpsertOne) UpdateDeployedSince() *IsDeployedUpsertOne {
	return u.Update(func(s *IsDeployedUpsert) {
		s.UpdateDeployedSince()
	})
}

// SetDeployedUntil sets the "deployed_until" field.
func (u *IsDeployedUpsertOne) SetDeployedUntil(v time.Time) *IsDeployedUpsertOne {
	return u.Update(func(s *IsDeployedUpsert) {
		s.SetDeployedUntil(v)
	})
}

// UpdateDeployedUntil sets the "deployed_until" field to the value that was provided on create.
func (u *IsDeployedUpsertOne) UpdateDeployedUntil() *IsDeployedUpsertOne {
	return u.Update(func(s *IsDeployedUpsert) {
		s.UpdateDeployedUntil()
	})
}

// SetResourceID sets the "resource_id" field.
func (u *IsDeployedUpsertOne) SetResourceID(v string) *IsDeployedUpsertOne {
	return u.Update(func(s *IsDeployedUpsert) {
		s.SetResourceID(v)
	})
}

// UpdateResourceID sets the "resource_id" field to the value that was provided on create.
func (u *IsDeployedUpsertOne) UpdateResourceID() *IsDeployedUpsertOne {
	return u.Update(func(s *IsDeployedUpsert) {
		s.UpdateResourceID()
	})
}

// SetEnvironment sets the "environment" field.
func (u *IsDeployedUpsertOne) SetEnvironment(v string) *IsDeployedUpsertOne {
	return u.Update(func(s *IsDeployedUpsert) {
		s.SetEnvironment(v)
	})
}

// UpdateEnvironment sets the "environment" field to the value that was provided on create.
func (u *IsDeployedUpsertOne) UpdateEnvironment() *IsDeployedUpsertOne {
	return u.Update(func(s *IsDeployedUpsert) {
		s.UpdateEnvironment()
	})
}

// SetOrigin sets the "origin" field.
func (u *IsDeployedUpsertOne) SetOrigin(v string) *IsDeployedUpsertOne {
	return u.Update(func(s *IsDeployedUpsert) {
		s.SetOrigin(v)
	})
}

// UpdateOrigin sets the "origin" field to the value that was provided on create.
func (u *IsDeployedUpsertOne) UpdateOrigin() *IsDeployedUpsertOne {
	return u.Update(func(s *IsDeployedUpsert) {
		s.UpdateOrigin()
	})
}

// SetCollector sets the "collector" field.
func (u *IsDeployedUpsertOne) SetCollector(v string) *IsDeployedUpsertOne {
	return u.Update(func(s *IsDeployedUpsert) {
		s.SetCollector(v)
	})
}

// UpdateCollector sets the "collector" field to the value that was provided on create.
func (u *IsDeployedUpsertOne) UpdateCollector() *IsDeployedUpsertOne {
	return u.Update(func(s *IsDeployedUpsert) {
		s.UpdateCollector()
	})
}

// Exec executes the query.
func (u *IsDeployedUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for IsDeployedCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *IsDeployedUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *IsDeployedUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: IsDeployedUpsertOne.ID is not supported by MySQL driver. Use IsDeployedUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *IsDeployedUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// IsDeployedCreateBulk is the builder for creating many IsDeployed entities in bulk.
type IsDeployedCreateBulk struct {
	config
	err      error
	builders []*IsDeployedCreate
	conflict []sql.ConflictOption
}

// Save creates the IsDeployed entities in the database.
func (idcb *IsDeployedCreateBulk) Save(ctx context.Context) ([]*IsDeployed, error) {
	if idcb.err != nil {
		return nil, idcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(idcb.builders))
	nodes := make([]*IsDeployed, len(idcb.builders))
	mutators := make([]Mutator, len(idcb.builders))
	for i := range idcb.builders {
		func(i int, root context.Context) {
			builder := idcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*IsDeployedMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, idcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = idcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, idcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, idcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (idcb *IsDeployedCreateBulk) SaveX(ctx context.Context) []*IsDeployed {
	v, err := idcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (idcb *IsDeployedCreateBulk) Exec(ctx context.Context) error {
	_, err := idcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (idcb *IsDeployedCreateBulk) ExecX(ctx context.Context) {
	if err := idcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.IsDeployed.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.IsDeployedUpsert) {
//			SetPackageID(v+v).
//		}).
//		Exec(ctx)
func (idcb *IsDeployedCreateBulk) OnConflict(opts ...sql.ConflictOption) *IsDeployedUpsertBulk {
	idcb.conflict = opts
	return &IsDeployedUpsertBulk{
		create: idcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.IsDeployed.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (idcb *IsDeployedCreateBulk) OnConflictColumns(columns ...string) *IsDeployedUpsertBulk {
	idcb.conflict = append(idcb.conflict, sql.ConflictColumns(columns...))
	return &IsDeployedUpsertBulk{
		create: idcb,
	}
}

// IsDeployedUpsertBulk is the builder for "upsert"-ing
// a bulk of IsDeployed nodes.
type IsDeployedUpsertBulk struct {
	create *IsDeployedCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.IsDeployed.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(isdeployed.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *IsDeployedUpsertBulk) UpdateNewValues() *IsDeployedUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(isdeployed.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.IsDeployed.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *IsDeployedUpsertBulk) Ignore() *IsDeployedUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *IsDeployedUpsertBulk) DoNothing() *IsDeployedUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the IsDeployedCreateBulk.OnConflict
// documentation for more info.
func (u *IsDeployedUpsertBulk) Update(set func(*IsDeployedUpsert)) *IsDeployedUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&IsDeployedUpsert{UpdateSet: update})
	}))
	return u
}

// SetPackageID sets the "package_id" field.
func (u *IsDeployedUpsertBulk) SetPackageID(v uuid.UUID) *IsDeployedUpsertBulk {
	return u.Update(func(s *IsDeployedUpsert) {
		s.SetPackageID(v)
	})
}

// UpdatePackageID sets the "package_id" field to the value that was provided on create.
func (u *IsDeployedUpsertBulk) UpdatePackageID() *IsDeployedUpsertBulk {
	return u.Update(func(s *IsDeployedUpsert) {
		s.UpdatePackageID()
	})
}

// SetDeployedSince sets the "deployed_since" field.
func (u *IsDeployedUpsertBulk) SetDeployedSince(v time.Time) *IsDeployedUpsertBulk {
	return u.Update(func(s *IsDeployedUpsert) {
		s.SetDeployedSince(v)
	})
}

// UpdateDeployedSince sets the "deployed_since" field to the value that was provided on create.
func (u *IsDeployedUpsertBulk) UpdateDeployedSince() *IsDeployedUpsertBulk {
	return u.Update(func(s *IsDeployedUpsert) {
		s.UpdateDeployedSince()
	})
}

// SetDeployedUntil sets the "deployed_until" field.
func (u *IsDeployedUpsertBulk) SetDeployedUntil(v time.Time) *IsDeployedUpsertBulk {
	return u.Update(func(s *IsDeployedUpsert) {
		s.SetDeployedUntil(v)
	})
}

// UpdateDeployedUntil sets the "deployed_until" field to the value that was provided on create.
func (u *IsDeployedUpsertBulk) UpdateDeployedUntil() *IsDeployedUpsertBulk {
	return u.Update(func(s *IsDeployedUpsert) {
		s.UpdateDeployedUntil()
	})
}

// SetResourceID sets the "resource_id" field.
func (u *IsDeployedUpsertBulk) SetResourceID(v string) *IsDeployedUpsertBulk {
	return u.Update(func(s *IsDeployedUpsert) {
		s.SetResourceID(v)
	})
}

// UpdateResourceID sets the "resource_id" field to the value that was provided on create.
func (u *IsDeployedUpsertBulk) UpdateResourceID() *IsDeployedUpsertBulk {
	return u.Update(func(s *IsDeployedUpsert) {
		s.UpdateResourceID()
	})
}

// SetEnvironment sets the "environment" field.
func (u *IsDeployedUpsertBulk) SetEnvironment(v string) *IsDeployedUpsertBulk {
	return u.Update(func(s *IsDeployedUpsert) {
		s.SetEnvironment(v)
	})
}

// UpdateEnvironment sets the "environment" field to the value that was provided on create.
func (u *IsDeployedUpsertBulk) UpdateEnvironment() *IsDeployedUpsertBulk {
	return u.Update(func(s *IsDeployedUpsert) {
		s.UpdateEnvironment()
	})
}

// SetOrigin sets the "origin" field.
func (u *IsDeployedUpsertBulk) SetOrigin(v string) *IsDeployedUpsertBulk {
	return u.Update(func(s *IsDeployedUpsert) {
		s.SetOrigin(v)
	})
}

// UpdateOrigin sets the "origin" field to the value that was provided on create.
func (u *IsDeployedUpsertBulk) UpdateOrigin() *IsDeployedUpsertBulk {
	return u.Update(func(s *IsDeployedUpsert) {
		s.UpdateOrigin()
	})
}

// SetCollector sets the "collector" field.
func (u *IsDeployedUpsertBulk) SetCollector(v string) *IsDeployedUpsertBulk {
	return u.Update(func(s *IsDeployedUpsert) {
		s.SetCollector(v)
	})
}

// UpdateCollector sets the "collector" field to the value that was provided on create.
func (u *IsDeployedUpsertBulk) UpdateCollector() *IsDeployedUpsertBulk {
	return u.Update(func(s *IsDeployedUpsert) {
		s.UpdateCollector()
	})
}

// Exec executes the query.
func (u *IsDeployedUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the IsDeployedCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for IsDeployedCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *IsDeployedUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/isdeployed"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packageversion"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
)

// IsDeployedUpdate is the builder for updating IsDeployed entities.
type IsDeployedUpdate struct {
	config
	hooks    []Hook
	mutation *IsDeployedMutation
}

// Where appends a list predicates to the IsDeployedUpdate builder.
func (idu *IsDeployedUpdate) Where(ps ...predicate.IsDeployed) *IsDeployedUpdate {
	idu.mutation.Where(ps...)
	return idu
}

// SetPackageID sets the "package_id" field.
func (idu *IsDeployedUpdate) SetPackageID(u uuid.UUID) *IsDeployedUpdate {
	idu.mutation.SetPackageID(u)
	return idu
}

// SetNillablePackageID sets the "package_id" field if the given value is not nil.
func (idu *IsDeployedUpdate) SetNillablePackageID(u *uuid.UUID) *IsDeployedUpdate {
	if u != nil {
		idu.SetPackageID(*u)
	}
	return idu
}

// SetDeployedSince sets the "deployed_since" field.
func (idu *IsDeployedUpdate) SetDeployedSince(t time.Time) *IsDeployedUpdate {
	idu.mutation.SetDeployedSince(t)
	return idu
}

// SetNillableDeployedSince sets the "deployed_since" field if the given value is not nil.
func (idu *IsDeployedUpdate) SetNillableDeployedSince(t *time.Time) *IsDeployedUpdate {
	if t != nil {
		idu.SetDeployedSince(*t)
	}
	return idu
}

// SetDeployedUntil sets the "deployed_until" field.
func (idu *IsDeployedUpdate) SetDeployedUntil(t time.Time) *IsDeployedUpdate {
	idu.mutation.SetDeployedUntil(t)
	return idu
}

// SetNillableDeployedUntil sets the "deployed_until" field if the given value is not nil.
func (idu *IsDeployedUpdate) SetNillableDeployedUntil(t *time.Time) *IsDeployedUpdate {
	if t != nil {
		idu.SetDeployedUntil(*t)
	}
	return idu
}

// SetResourceID sets the "resource_id" field.
func (idu *IsDeployedUpdate) SetResourceID(s string) *IsDeployedUpdate {
	idu.mutation.SetResourceID(s)
	return idu
}

// SetNillableResourceID sets the "resource_id" field if the given value is not nil.
func (idu *IsDeployedUpdate) SetNillableResourceID(s *string) *IsDeployedUpdate {
	if s != nil {
		idu.SetResourceID(*s)
	}
	return idu
}

// SetEnvironment sets the "environment" field.
func (idu *IsDeployedUpdate) SetEnvironment(s string) *IsDeployedUpdate {
	idu.mutation.SetEnvironment(s)
	return idu
}

// SetNillableEnvironment sets the "environment" field if the given value is not nil.
func (idu *IsDeployedUpdate) SetNillableEnvironment(s *string) *IsDeployedUpdate {
	if s != nil {
		idu.SetEnvironment(*s)
	}
	return idu
}

// SetOrigin sets the "origin" field.
func (idu *IsDeployedUpdate) SetOrigin(s string) *IsDeployedUpdate {
	idu.mutation.SetOrigin(s)
	return idu
}

// SetNillableOrigin sets the "origin" field if the given value is not nil.
func (idu *IsDeployedUpdate) SetNillableOrigin(s *string) *IsDeployedUpdate {
	if s != nil {
		idu.SetOrigin(*s)
	}
	return idu
}

// SetCollector sets the "collector" field.
func (idu *IsDeployedUpdate) SetCollector(s string) *IsDeployedUpdate {
	idu.mutation.SetCollector(s)
	return idu
}

// SetNillableCollector sets the "collector" field if the given value is not nil.
func (idu *IsDeployedUpdate) SetNillableCollector(s *string) *IsDeployedUpdate {
	if s != nil {
		idu.SetCollector(*s)
	}
	return idu
}

// SetPackage sets the "package" edge to the PackageVersion entity.
func (idu *IsDeployedUpdate) SetPackage(p *PackageVersion) *IsDeployedUpdate {
	return idu.SetPackageID(p.ID)
}

// Mutation returns the IsDeployedMutation object of the builder.
func (idu *IsDeployedUpdate) Mutation() *IsDeployedMutation {
	return idu.mutation
}

// ClearPackage clears the "package" edge to the PackageVersion entity.
func (idu *IsDeployedUpdate) ClearPackage() *IsDeployedUpdate {
	idu.mutation.ClearPackage()
	return idu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (idu *IsDeployedUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, idu.sqlSave, idu.mutation, idu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (idu *IsDeployedUpdate) SaveX(ctx context.Context) int {
	affected, err := idu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (idu *IsDeployedUpdate) Exec(ctx context.Context) error {
	_, err := idu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (idu *IsDeployedUpdate) ExecX(ctx context.Context) {
	if err := idu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (idu *IsDeployedUpdate) check() error {
	if idu.mutation.PackageCleared() && len(idu.mutation.PackageIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "IsDeployed.package"`)
	}
	return nil
}

func (idu *IsDeployedUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := idu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(isdeployed.Table, isdeployed.Columns, sqlgraph.NewFieldSpec(isdeployed.FieldID, field.TypeUUID))
	if ps := idu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := idu.mutation.DeployedSince(); ok {
		_spec.SetField(isdeployed.FieldDeployedSince, field.TypeTime, value)
	}
	if value, ok := idu.mutation.DeployedUntil(); ok {
		_spec.SetField(isdeployed.FieldDeployedUntil, field.TypeTime, value)
	}
	if value, ok := idu.mutation.ResourceID(); ok {
		_spec.SetField(isdeployed.FieldResourceID, field.TypeString, value)
	}
	if value, ok := idu.mutation.Environment(); ok {
		_spec.SetField(isdeployed.FieldEnvironment, field.TypeString, value)
	}
	if value, ok := idu.mutation.Origin(); ok {
		_spec.SetField(isdeployed.FieldOrigin, field.TypeString, value)
	}
	if value, ok := idu.mutation.Collector(); ok {
		_spec.SetField(isdeployed.FieldCollector, field.TypeString, value)
	}
	if idu.mutation.PackageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   isdeployed.PackageTable,
			Columns: []string{isdeployed.PackageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packageversion.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := idu.mutation.PackageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   isdeployed.PackageTable,
			Columns: []string{isdeployed.PackageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packageversion.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, idu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{isdeployed.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	idu.mutation.done = true
	return n, nil
}

// IsDeployedUpdateOne is the builder for updating a single IsDeployed entity.
type IsDeployedUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *IsDeployedMutation
}

// SetPackageID sets the "package_id" field.
func (iduo *IsDeployedUpdateOne) SetPackageID(u uuid.UUID) *IsDeployedUpdateOne {
	iduo.mutation.SetPackageID(u)
	return iduo
}

// SetNillablePackageID sets the "package_id" field if the given value is not nil.
func (iduo *IsDeployedUpdateOne) SetNillablePackageID(u *uuid.UUID) *IsDeployedUpdateOne {
	if u != nil {
		iduo.SetPackageID(*u)
	}
	return iduo
}

// SetDeployedSince sets the "deployed_since" field.
func (iduo *IsDeployedUpdateOne) SetDeployedSince(t time.Time) *IsDeployedUpdateOne {
	iduo.mutation.SetDeployedSince(t)
	return iduo
}

// SetNillableDeployedSince sets the "deployed_since" field if the given value is not nil.
func (iduo *IsDeployedUpdateOne) SetNillableDeployedSince(t *time.Time) *IsDeployedUpdateOne {
	if t != nil {
		iduo.SetDeployedSince(*t)
	}
	return iduo
}

// SetDeployedUntil sets the "deployed_until" field.
func (iduo *IsDeployedUpdateOne) SetDeployedUntil(t time.Time) *IsDeployedUpdateOne {
	iduo.mutation.SetDeployedUntil(t)
	return iduo
}

// SetNillableDeployedUntil sets the "deployed_until" field if the given value is not nil.
func (iduo *IsDeployedUpdateOne) SetNillableDeployedUntil(t *time.Time) *IsDeployedUpdateOne {
	if t != nil {
		iduo.SetDeployedUntil(*t)
	}
	return iduo
}

// SetResourceID sets the "resource_id" field.
func (iduo *IsDeployedUpdateOne) SetResourceID(s string) *IsDeployedUpdateOne {
	iduo.mutation.SetResourceID(s)
	return iduo
}

// SetNillableResourceID sets the "resource_id" field if the given value is not nil.
func (iduo *IsDeployedUpdateOne) SetNillableResourceID(s *string) *IsDeployedUpdateOne {
	if s != nil {
		iduo.SetResourceID(*s)
	}
	return iduo
}

// SetEnvironment sets the "environment" field.
func (iduo *IsDeployedUpdateOne) SetEnvironment(s string) *IsDeployedUpdateOne {
	iduo.mutation.SetEnvironment(s)
	return iduo
}

// SetNillableEnvironment sets the "environment" field if the given value is not nil.
func (iduo *IsDeployedUpdateOne) SetNillableEnvironment(s *string) *IsDeployedUpdateOne {
	if s != nil {
		iduo.SetEnvironment(*s)
	}
	return iduo
}

// SetOrigin sets the "origin" field.
func (iduo *IsDeployedUpdateOne) SetOrigin(s string) *IsDeployedUpdateOne {
	iduo.mutation.SetOrigin(s)
	return iduo
}

// SetNillableOrigin sets the "origin" field if the given value is not nil.
func (iduo *IsDeployedUpdateOne) SetNillableOrigin(s *string) *IsDeployedUpdateOne {
	if s != nil {
		iduo.SetOrigin(*s)
	}
	return iduo
}

// SetCollector sets the "collector" field.
func (iduo *IsDeployedUpdateOne) SetCollector(s string) *IsDeployedUpdateOne {
	iduo.mutation.SetCollector(s)
	return iduo
}

// SetNillableCollector sets the "collector" field if the given value is not nil.
func (iduo *IsDeployedUpdateOne) SetNillableCollector(s *string) *IsDeployedUpdateOne {
	if s != nil {
		iduo.SetCollector(*s)
	}
	return iduo
}

// SetPackage sets the "package" edge to the PackageVersion entity.
func (iduo *IsDeployedUpdateOne) SetPackage(p *PackageVersion) *IsDeployedUpdateOne {
	return iduo.SetPackageID(p.ID)
}

// Mutation returns the IsDeployedMutation object of the builder.
func (iduo *IsDeployedUpdateOne) Mutation() *IsDeployedMutation {
	return iduo.mutation
}

// ClearPackage clears the "package" edge to the PackageVersion entity.
func (iduo *IsDeployedUpdateOne) ClearPackage() *IsDeployedUpdateOne {
	iduo.mutation.ClearPackage()
	return iduo
}

// Where appends a list predicates to the IsDeployedUpdate builder.
func (iduo *IsDeployedUpdateOne) Where(ps ...predicate.IsDeployed) *IsDeployedUpdateOne {
	iduo.mutation.Where(ps...)
	return iduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iduo *IsDeployedUpdateOne) Select(field string, fields ...string) *IsDeployedUpdateOne {
	iduo.fields = append([]string{field}, fields...)
	return iduo
}

// Save executes the query and returns the updated IsDeployed entity.
func (iduo *IsDeployedUpdateOne) Save(ctx context.Context) (*IsDeployed, error) {
	return withHooks(ctx, iduo.sqlSave, iduo.mutation, iduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iduo *IsDeployedUpdateOne) SaveX(ctx context.Context) *IsDeployed {
	node, err := iduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iduo *IsDeployedUpdateOne) Exec(ctx context.Context) error {
	_, err := iduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iduo *IsDeployedUpdateOne) ExecX(ctx context.Context) {
	if err := iduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iduo *IsDeployedUpdateOne) check() error {
	if iduo.mutation.PackageCleared() && len(iduo.mutation.PackageIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "IsDeployed.package"`)
	}
	return nil
}

func (iduo *IsDeployedUpdateOne) sqlSave(ctx context.Context) (_node *IsDeployed, err error) {
	if err := iduo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(isdeployed.Table, isdeployed.Columns, sqlgraph.NewFieldSpec(isdeployed.FieldID, field.TypeUUID))
	id, ok := iduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "IsDeployed.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, isdeployed.FieldID)
		for _, f := range fields {
			if !isdeployed.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != isdeployed.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iduo.mutation.DeployedSince(); ok {
		_spec.SetField(isdeployed.FieldDeployedSince, field.TypeTime, value)
	}
	if value, ok := iduo.mutation.DeployedUntil(); ok {
		_spec.SetField(isdeployed.FieldDeployedUntil, field.TypeTime, value)
	}
	if value, ok := iduo.mutation.ResourceID(); ok {
		_spec.SetField(isdeployed.FieldResourceID, field.TypeString, value)
	}
	if value, ok := iduo.mutation.Environment(); ok {
		_spec.SetField(isdeployed.FieldEnvironment, field.TypeString, value)
	}
	if value, ok := iduo.mutation.Origin(); ok {
		_spec.SetField(isdeployed.FieldOrigin, field.TypeString, value)
	}
	if value, ok := iduo.mutation.Collector(); ok {
		_spec.SetField(isdeployed.FieldCollector, field.TypeString, value)
	}
	if iduo.mutation.PackageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   isdeployed.PackageTable,
			Columns: []string{isdeployed.PackageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packageversion.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iduo.mutation.PackageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   isdeployed.PackageTable,
			Columns: []string{isdeployed.PackageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packageversion.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &IsDeployed{config: iduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{isdeployed.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iduo.mutation.done = true
	return _node, nil
}

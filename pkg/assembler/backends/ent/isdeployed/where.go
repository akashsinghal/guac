// Code generated by ent, DO NOT EDIT.

package isdeployed

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.IsDeployed {
	return predicate.IsDeployed(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.IsDeployed {
	return predicate.IsDeployed(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.IsDeployed {
	return predicate.IsDeployed(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.IsDeployed {
	return predicate.IsDeployed(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.IsDeployed {
	return predicate.IsDeployed(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.IsDeployed {
	return predicate.IsDeployed(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.IsDeployed {
	return predicate.IsDeployed(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.IsDeployed {
	return predicate.IsDeployed(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.IsDeployed {
	return predicate.IsDeployed(sql.FieldLTE(FieldID, id))
}

// PackageID applies equality check predicate on the "package_id" field. It's identical to PackageIDEQ.
func PackageID(v uuid.UUID) predicate.IsDeployed {
	return predicate.IsDeployed(sql.FieldEQ(FieldPackageID, v))
}

// DeployedSince applies equality check predicate on the "deployed_since" field. It's identical to DeployedSinceEQ.
func DeployedSince(v time.Time) predicate.IsDeployed {
	return predicate.IsDeployed(sql.FieldEQ(FieldDeployedSince, v))
}

// DeployedUntil applies equality check predicate on the "deployed_until" field. It's identical to DeployedUntilEQ.
func DeployedUntil(v time.Time) predicate.IsDeployed {
	return predicate.IsDeployed(sql.FieldEQ(FieldDeployedUntil, v))
}

// ResourceID applies equality check predicate on the "resource_id" field. It's identical to ResourceIDEQ.
func ResourceID(v string) predicate.IsDeployed {
	return predicate.IsDeployed(sql.FieldEQ(FieldResourceID, v))
}

// Environment applies equality check predicate on the "environment" field. It's identical to EnvironmentEQ.
func Environment(v string) predicate.IsDeployed {
	return predicate.IsDeployed(sql.FieldEQ(FieldEnvironment, v))
}

// Origin applies equality check predicate on the "origin" field. It's identical to OriginEQ.
func Origin(v string) predicate.IsDeployed {
	return predicate.IsDeployed(sql.FieldEQ(FieldOrigin, v))
}

// Collector applies equality check predicate on the "collector" field. It's identical to CollectorEQ.
func Collector(v string) predicate.IsDeployed {
	return predicate.IsDeployed(sql.FieldEQ(FieldCollector, v))
}

// PackageIDEQ applies the EQ predicate on the "package_id" field.
func PackageIDEQ(v uuid.UUID) predicate.IsDeployed {
	return predicate.IsDeployed(sql.FieldEQ(FieldPackageID, v))
}

// PackageIDNEQ applies the NEQ predicate on the "package_id" field.
func PackageIDNEQ(v uuid.UUID) predicate.IsDeployed {
	return predicate.IsDeployed(sql.FieldNEQ(FieldPackageID, v))
}

// PackageIDIn applies the In predicate on the "package_id" field.
func PackageIDIn(vs ...uuid.UUID) predicate.IsDeployed {
	return predicate.IsDeployed(sql.FieldIn(FieldPackageID, vs...))
}

// PackageIDNotIn applies the NotIn predicate on the "package_id" field.
func PackageIDNotIn(vs ...uuid.UUID) predicate.IsDeployed {
	return predicate.IsDeployed(sql.FieldNotIn(FieldPackageID, vs...))
}

// DeployedSinceEQ applies the EQ predicate on the "deployed_since" field.
func DeployedSinceEQ(v time.Time) predicate.IsDeployed {
	return predicate.IsDeployed(sql.FieldEQ(FieldDeployedSince, v))
}

// DeployedSinceNEQ applies the NEQ predicate on the "deployed_since" field.
func DeployedSinceNEQ(v time.Time) predicate.IsDeployed {
	return predicate.IsDeployed(sql.FieldNEQ(FieldDeployedSince, v))
}

// DeployedSinceIn applies the In predicate on the "deployed_since" field.
func DeployedSinceIn(vs ...time.Time) predicate.IsDeployed {
	return predicate.IsDeployed(sql.FieldIn(FieldDeployedSince, vs...))
}

// DeployedSinceNotIn applies the NotIn predicate on the "deployed_since" field.
func DeployedSinceNotIn(vs ...time.Time) predicate.IsDeployed {
	return predicate.IsDeployed(sql.FieldNotIn(FieldDeployedSince, vs...))
}

// DeployedSinceGT applies the GT predicate on the "deployed_since" field.
func DeployedSinceGT(v time.Time) predicate.IsDeployed {
	return predicate.IsDeployed(sql.FieldGT(FieldDeployedSince, v))
}

// DeployedSinceGTE applies the GTE predicate on the "deployed_since" field.
func DeployedSinceGTE(v time.Time) predicate.IsDeployed {
	return predicate.IsDeployed(sql.FieldGTE(FieldDeployedSince, v))
}

// DeployedSinceLT applies the LT predicate on the "deployed_since" field.
func DeployedSinceLT(v time.Time) predicate.IsDeployed {
	return predicate.IsDeployed(sql.FieldLT(FieldDeployedSince, v))
}

// DeployedSinceLTE applies the LTE predicate on the "deployed_since" field.
func DeployedSinceLTE(v time.Time) predicate.IsDeployed {
	return predicate.IsDeployed(sql.FieldLTE(FieldDeployedSince, v))
}

// DeployedUntilEQ applies the EQ predicate on the "deployed_until" field.
func DeployedUntilEQ(v time.Time) predicate.IsDeployed {
	return predicate.IsDeployed(sql.FieldEQ(FieldDeployedUntil, v))
}

// DeployedUntilNEQ applies the NEQ predicate on the "deployed_until" field.
func DeployedUntilNEQ(v time.Time) predicate.IsDeployed {
	return predicate.IsDeployed(sql.FieldNEQ(FieldDeployedUntil, v))
}

// DeployedUntilIn applies the In predicate on the "deployed_until" field.
func DeployedUntilIn(vs ...time.Time) predicate.IsDeployed {
	return predicate.IsDeployed(sql.FieldIn(FieldDeployedUntil, vs...))
}

// DeployedUntilNotIn applies the NotIn predicate on the "deployed_until" field.
func DeployedUntilNotIn(vs ...time.Time) predicate.IsDeployed {
	return predicate.IsDeployed(sql.FieldNotIn(FieldDeployedUntil, vs...))
}

// DeployedUntilGT applies the GT predicate on the "deployed_until" field.
func DeployedUntilGT(v time.Time) predicate.IsDeployed {
	return predicate.IsDeployed(sql.FieldGT(FieldDeployedUntil, v))
}

// DeployedUntilGTE applies the GTE predicate on the "deployed_until" field.
func DeployedUntilGTE(v time.Time) predicate.IsDeployed {
	return predicate.IsDeployed(sql.FieldGTE(FieldDeployedUntil, v))
}

// DeployedUntilLT applies the LT predicate on the "deployed_until" field.
func DeployedUntilLT(v time.Time) predicate.IsDeployed {
	return predicate.IsDeployed(sql.FieldLT(FieldDeployedUntil, v))
}

// DeployedUntilLTE applies the LTE predicate on the "deployed_until" field.
func DeployedUntilLTE(v time.Time) predicate.IsDeployed {
	return predicate.IsDeployed(sql.FieldLTE(FieldDeployedUntil, v))
}

// ResourceIDEQ applies the EQ predicate on the "resource_id" field.
func ResourceIDEQ(v string) predicate.IsDeployed {
	return predicate.IsDeployed(sql.FieldEQ(FieldResourceID, v))
}

// ResourceIDNEQ applies the NEQ predicate on the "resource_id" field.
func ResourceIDNEQ(v string) predicate.IsDeployed {
	return predicate.IsDeployed(sql.FieldNEQ(FieldResourceID, v))
}

// ResourceIDIn applies the In predicate on the "resource_id" field.
func ResourceIDIn(vs ...string) predicate.IsDeployed {
	return predicate.IsDeployed(sql.FieldIn(FieldResourceID, vs...))
}

// ResourceIDNotIn applies the NotIn predicate on the "resource_id" field.
func ResourceIDNotIn(vs ...string) predicate.IsDeployed {
	return predicate.IsDeployed(sql.FieldNotIn(FieldResourceID, vs...))
}

// ResourceIDGT applies the GT predicate on the "resource_id" field.
func ResourceIDGT(v string) predicate.IsDeployed {
	return predicate.IsDeployed(sql.FieldGT(FieldResourceID, v))
}

// ResourceIDGTE applies the GTE predicate on the "resource_id" field.
func ResourceIDGTE(v string) predicate.IsDeployed {
	return predicate.IsDeployed(sql.FieldGTE(FieldResourceID, v))
}

// ResourceIDLT applies the LT predicate on the "resource_id" field.
func ResourceIDLT(v string) predicate.IsDeployed {
	return predicate.IsDeployed(sql.FieldLT(FieldResourceID, v))
}

// ResourceIDLTE applies the LTE predicate on the "resource_id" field.
func ResourceIDLTE(v string) predicate.IsDeployed {
	return predicate.IsDeployed(sql.FieldLTE(FieldResourceID, v))
}

// ResourceIDContains applies the Contains predicate on the "resource_id" field.
func ResourceIDContains(v string) predicate.IsDeployed {
	return predicate.IsDeployed(sql.FieldContains(FieldResourceID, v))
}

// ResourceIDHasPrefix applies the HasPrefix predicate on the "resource_id" field.
func ResourceIDHasPrefix(v string) predicate.IsDeployed {
	return predicate.IsDeployed(sql.FieldHasPrefix(FieldResourceID, v))
}

// ResourceIDHasSuffix applies the HasSuffix predicate on the "resource_id" field.
func ResourceIDHasSuffix(v string) predicate.IsDeployed {
	return predicate.IsDeployed(sql.FieldHasSuffix(FieldResourceID, v))
}

// ResourceIDEqualFold applies the EqualFold predicate on the "resource_id" field.
func ResourceIDEqualFold(v string) predicate.IsDeployed {
	return predicate.IsDeployed(sql.FieldEqualFold(FieldResourceID, v))
}

// ResourceIDContainsFold applies the ContainsFold predicate on the "resource_id" field.
func ResourceIDContainsFold(v string) predicate.IsDeployed {
	return predicate.IsDeployed(sql.FieldContainsFold(FieldResourceID, v))
}

// EnvironmentEQ applies the EQ predicate on the "environment" field.
func EnvironmentEQ(v string) predicate.IsDeployed {
	return predicate.IsDeployed(sql.FieldEQ(FieldEnvironment, v))
}

// EnvironmentNEQ applies the NEQ predicate on the "environment" field.
func EnvironmentNEQ(v string) predicate.IsDeployed {
	return predicate.IsDeployed(sql.FieldNEQ(FieldEnvironment, v))
}

// EnvironmentIn applies the In predicate on the "environment" field.
func EnvironmentIn(vs ...string) predicate.IsDeployed {
	return predicate.IsDeployed(sql.FieldIn(FieldEnvironment, vs...))
}

// EnvironmentNotIn applies the NotIn predicate on the "environment" field.
func EnvironmentNotIn(vs ...string) predicate.IsDeployed {
	return predicate.IsDeployed(sql.FieldNotIn(FieldEnvironment, vs...))
}

// EnvironmentGT applies the GT predicate on the "environment" field.
func EnvironmentGT(v string) predicate.IsDeployed {
	return predicate.IsDeployed(sql.FieldGT(FieldEnvironment, v))
}

// EnvironmentGTE applies the GTE predicate on the "environment" field.
func EnvironmentGTE(v string) predicate.IsDeployed {
	return predicate.IsDeployed(sql.FieldGTE(FieldEnvironment, v))
}

// EnvironmentLT applies the LT predicate on the "environment" field.
func EnvironmentLT(v string) predicate.IsDeployed {
	return predicate.IsDeployed(sql.FieldLT(FieldEnvironment, v))
}

// EnvironmentLTE applies the LTE predicate on the "environment" field.
func EnvironmentLTE(v string) predicate.IsDeployed {
	return predicate.IsDeployed(sql.FieldLTE(FieldEnvironment, v))
}

// EnvironmentContains applies the Contains predicate on the "environment" field.
func EnvironmentContains(v string) predicate.IsDeployed {
	return predicate.IsDeployed(sql.FieldContains(FieldEnvironment, v))
}

// EnvironmentHasPrefix applies the HasPrefix predicate on the "environment" field.
func EnvironmentHasPrefix(v string) predicate.IsDeployed {
	return predicate.IsDeployed(sql.FieldHasPrefix(FieldEnvironment, v))
}

// EnvironmentHasSuffix applies the HasSuffix predicate on the "environment" field.
func EnvironmentHasSuffix(v string) predicate.IsDeployed {
	return predicate.IsDeployed(sql.FieldHasSuffix(FieldEnvironment, v))
}

// EnvironmentEqualFold applies the EqualFold predicate on the "environment" field.
func EnvironmentEqualFold(v string) predicate.IsDeployed {
	return predicate.IsDeployed(sql.FieldEqualFold(FieldEnvironment, v))
}

// EnvironmentContainsFold applies the ContainsFold predicate on the "environment" field.
func EnvironmentContainsFold(v string) predicate.IsDeployed {
	return predicate.IsDeployed(sql.FieldContainsFold(FieldEnvironment, v))
}

// OriginEQ applies the EQ predicate on the "origin" field.
func OriginEQ(v string) predicate.IsDeployed {
	return predicate.IsDeployed(sql.FieldEQ(FieldOrigin, v))
}

// OriginNEQ applies the NEQ predicate on the "origin" field.
func OriginNEQ(v string) predicate.IsDeployed {
	return predicate.IsDeployed(sql.FieldNEQ(FieldOrigin, v))
}

// OriginIn applies the In predicate on the "origin" field.
func OriginIn(vs ...string) predicate.IsDeployed {
	return predicate.IsDeployed(sql.FieldIn(FieldOrigin, vs...))
}

// OriginNotIn applies the NotIn predicate on the "origin" field.
func OriginNotIn(vs ...string) predicate.IsDeployed {
	return predicate.IsDeployed(sql.FieldNotIn(FieldOrigin, vs...))
}

// OriginGT applies the GT predicate on the "origin" field.
func OriginGT(v string) predicate.IsDeployed {
	return predicate.IsDeployed(sql.FieldGT(FieldOrigin, v))
}

// OriginGTE applies the GTE predicate on the "origin" field.
func OriginGTE(v string) predicate.IsDeployed {
	return predicate.IsDeployed(sql.FieldGTE(FieldOrigin, v))
}

// OriginLT applies the LT predicate on the "origin" field.
func OriginLT(v string) predicate.IsDeployed {
	return predicate.IsDeployed(sql.FieldLT(FieldOrigin, v))
}

// OriginLTE applies the LTE predicate on the "origin" field.
func OriginLTE(v string) predicate.IsDeployed {
	return predicate.IsDeployed(sql.FieldLTE(FieldOrigin, v))
}

// OriginContains applies the Contains predicate on the "origin" field.
func OriginContains(v string) predicate.IsDeployed {
	return predicate.IsDeployed(sql.FieldContains(FieldOrigin, v))
}

// OriginHasPrefix applies the HasPrefix predicate on the "origin" field.
func OriginHasPrefix(v string) predicate.IsDeployed {
	return predicate.IsDeployed(sql.FieldHasPrefix(FieldOrigin, v))
}

// OriginHasSuffix applies the HasSuffix predicate on the "origin" field.
func OriginHasSuffix(v string) predicate.IsDeployed {
	return predicate.IsDeployed(sql.FieldHasSuffix(FieldOrigin, v))
}

// OriginEqualFold applies the EqualFold predicate on the "origin" field.
func OriginEqualFold(v string) predicate.IsDeployed {
	return predicate.IsDeployed(sql.FieldEqualFold(FieldOrigin, v))
}

// OriginContainsFold applies the ContainsFold predicate on the "origin" field.
func OriginContainsFold(v string) predicate.IsDeployed {
	return predicate.IsDeployed(sql.FieldContainsFold(FieldOrigin, v))
}

// CollectorEQ applies the EQ predicate on the "collector" field.
func CollectorEQ(v string) predicate.IsDeployed {
	return predicate.IsDeployed(sql.FieldEQ(FieldCollector, v))
}

// CollectorNEQ applies the NEQ predicate on the "collector" field.
func CollectorNEQ(v string) predicate.IsDeployed {
	return predicate.IsDeployed(sql.FieldNEQ(FieldCollector, v))
}

// CollectorIn applies the In predicate on the "collector" field.
func CollectorIn(vs ...string) predicate.IsDeployed {
	return predicate.IsDeployed(sql.FieldIn(FieldCollector, vs...))
}

// CollectorNotIn applies the NotIn predicate on the "collector" field.
func CollectorNotIn(vs ...string) predicate.IsDeployed {
	return predicate.IsDeployed(sql.FieldNotIn(FieldCollector, vs...))
}

// CollectorGT applies the GT predicate on the "collector" field.
func CollectorGT(v string) predicate.IsDeployed {
	return predicate.IsDeployed(sql.FieldGT(FieldCollector, v))
}

// CollectorGTE applies the GTE predicate on the "collector" field.
func CollectorGTE(v string) predicate.IsDeployed {
	return predicate.IsDeployed(sql.FieldGTE(FieldCollector, v))
}

// CollectorLT applies the LT predicate on the "collector" field.
func CollectorLT(v string) predicate.IsDeployed {
	return predicate.IsDeployed(sql.FieldLT(FieldCollector, v))
}

// CollectorLTE applies the LTE predicate on the "collector" field.
func CollectorLTE(v string) predicate.IsDeployed {
	return predicate.IsDeployed(sql.FieldLTE(FieldCollector, v))
}

// CollectorContains applies the Contains predicate on the "collector" field.
func CollectorContains(v string) predicate.IsDeployed {
	return predicate.IsDeployed(sql.FieldContains(FieldCollector, v))
}

// CollectorHasPrefix applies the HasPrefix predicate on the "collector" field.
func CollectorHasPrefix(v string) predicate.IsDeployed {
	return predicate.IsDeployed(sql.FieldHasPrefix(FieldCollector, v))
}

// CollectorHasSuffix applies the HasSuffix predicate on the "collector" field.
func CollectorHasSuffix(v string) predicate.IsDeployed {
	return predicate.IsDeployed(sql.FieldHasSuffix(FieldCollector, v))
}

// CollectorEqualFold applies the EqualFold predicate on the "collector" field.
func CollectorEqualFold(v string) predicate.IsDeployed {
	return predicate.IsDeployed(sql.FieldEqualFold(FieldCollector, v))
}

// CollectorContainsFold applies the ContainsFold predicate on the "collector" field.
func CollectorContainsFold(v string) predicate.IsDeployed {
	return predicate.IsDeployed(sql.FieldContainsFold(FieldCollector, v))
}

// HasPackage applies the HasEdge predicate on the "package" edge.
func HasPackage() predicate.IsDeployed {
	return predicate.IsDeployed(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, PackageTable, PackageColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPackageWith applies the HasEdge predicate on the "package" edge with a given conditions (other predicates).
func HasPackageWith(preds ...predicate.PackageVersion) predicate.IsDeployed {
	return predicate.IsDeployed(func(s *sql.Selector) {
		step := newPackageStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.IsDeployed) predicate.IsDeployed {
	return predicate.IsDeployed(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.IsDeployed) predicate.IsDeployed {
	return predicate.IsDeployed(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.IsDeployed) predicate.IsDeployed {
	return predicate.IsDeployed(sql.NotPredicates(p))
}
